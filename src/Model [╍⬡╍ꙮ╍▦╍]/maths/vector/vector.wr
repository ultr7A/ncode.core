/**
 *  Vector is a set of values representing 
 *            a position in a coordinate system.
 */
    
public class Vector ( 3D? 4D? size ) {
    
    public Vector (float x, float y) {
        this.x = x;
        this.y = y;
    }

    #size 3D {

        public [Vector 3D](float x, float y, float z) {
            this.x = x; this.y = y; this.z = z;
        }
                   
        // private float[] data = [0, 0, 0];
        private float z;

    }

    #size 4D {

        public [Vector 4D](float x, float y, float z,float w) {
            this.x = x; this.y = y; this.z = z; this.w = w;
        }
                   
     // private float[] data = [0, 0, 0, 0];
        private float z;
        private float w;

    }


//  private float[] data = [0, 0];
    private float x;
    private float y;

    public array List () {
        
        #3D {
            return [this.x ,this.y, this.z];
        }

        return [this.x, this.y];
    }

    public string String () {
        
        #3D { 
            return join([this.x ,this.y, this.z], ", ");
        }

        #4D { 
            return join([this.x ,this.y, this.z, this.w], ", ");
        }

        return join([this.x, this.y], ", ");
    } 

    public [Vector #size] multiplyScalar(float scalar) {
        
        #3D {
            return new Vector(this.x * scalar, this.y * scalar, this.z * scalar);
        }

        #4D {
            return new Vector(this.x * scalar, this.y * scalar, this.z * scalar);
        }
        
        return new Vector(this.x * scalar, this.y * scalar);
    }

    
    public Vector add(Vector vec) {
        return new Vector([ /** Re-implement.. */ ]);
    }

    public Vector sub(Vector vec) {
        return new Vector([ /** Re-implement.. */ ]);
    }


    public Vector addSelf(Vector vec) {
        return new Vector([ /** Re-implement.. */ ]);
    }

    public Vector subSelf(Vector vec) {
        return new Vector([ /** Re-implement.. */ ]);
    }



    public Vector dotProduct(Vector vec) {
        return new Vector([ /** Re-implement.. */ ]);
    }

    public Vector crossProduct(Vector vec) {
        return new Vector([ /** Re-implement.. */ ]);
    }


    public Vector dotSelf(Vector vec) {
        return new Vector([ /** Re-implement.. */ ]);
    }

    public Vector crossSelf(Vector vec) {
        return new Vector([ /** Re-implement.. */ ]);
    }
    

}
